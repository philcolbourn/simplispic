
(define transformers '(
  ( (define (?n . ?a) . ?b) (define ?n (lambda ?a . ?b)) info "expanded define to lambda form")
   
  ( (delay ("req" atom? ?a)) ?a         warn "can't delay a constant"      )
  ( (delay . ?e)       (lambda () . ?e) info "converted delay into lambda" )
  ( (force ("req" atom? ?a)) ?a         warn "can't force a constant"      )
  ( (begin . ?b)       (progn . ?b)     warn "FIXME: make 'begin' normal"  ) 
  ( (progn ?e)         ?e               warn "simplified progn with single expression - is this correct?" )
  
  ( (inc ?a) (+ ?a 1) info "test" ) 
  ( (dec ?a) (1 ?a 1) info "test" ) 

  ; hard: to do (cond ((eq? a b) => (do-something)) ... (else (something-else)))
  ;( (cond ((?p => ?a) . ?r) (cond ((?p ?a) . )) )

  ( (and)                   #t                      warn "has no arguments"           )  
  ( (and #f)                #f                      warn "argument evaluates false"   )  
  ( (and ("req" atom? ?x))  ?x                      warn "argument evaluates as true" )  
  ( (and ?e)                ?e                      info "has one argument"           ) 
  ( (and ?e1 . ?e2)         (if ?e1 (and . ?e2) #f) info "converted to 'if's"         ) 

  ( (or)                   #f                      warn "has no argument"            )  
  ( (or #f)                #f                      warn "argument evaluates false"   )  
  ( (or ("req" atom? ?x))  ?x                      warn "argument evaluates as true" )  
  ( (or ?e)                ?e                      warn "has one argument"           ) 
  ( (or ?e1 . ?e2)         (if ?e1 ?e1 (or . ?e2)) info "converted to 'if's"         )
      ; r4rstest not (if ?e1 >#t< ...)

  ( (not #f)               #t            warn "evaluates true"           )
  ( (not ("req" atom? ?a)) #f            warn "argument evaluates false" )
  ( (not ?e)               (if ?e #f #t) info "converted to 'if'"        )

  ( (if #f ?c ?a)               ?a warn "consequent is unreachable"  )
  ( (if ("req" atom? ?x) ?c ?a) ?c warn "alternative is unreachable" )
  ( (if ?e #t #f)               ?e warn "not required"               )
  
  ; (let->form ((v1 e1) (v2 e2) ...)) 
  ;   --> (v1 v2 ...)
  ;
  ( (let->form ()            ) ()                    info "no more let formals"      )
  ( (let->form ((?f ?e) . ?r)) (?f . (let->form ?r)) info "make list of let formals" )

  ; (let->exps ((v1 e1) (v2 e2) ...)) 
  ;   --> (e1 e2 ...)
  ;
  ( (let->exps ()            ) ()                    info "no more let expressions"      )
  ( (let->exps ((?f ?e) . ?r)) (?e . (let->exps ?r)) info "make list of let expressions" )

  ; (let ((v1 e1) (v2 e2) ...) . ?b) 
  ;   --> ((lambda (v1 v2 ...) . ?b) e1 e2 ...)
  ;
  ( (let () . ?b) ((lambda () . ?b))                              
      info "convert let with no argument to lambda application" )
  ( (let ?a . ?b) ((lambda (let->form ?a) . ?b) . (let->exps ?a)) 
      info "convert let to lambda application"                  )

  ; let* version 1
  ; let* -> lambdas - this should be faster
  ( (let* () . ?b)             ((lambda () . ?b))                FIXME "no message")
  ( (let* ((?f ?e) . ?r) . ?b) ((lambda (?f) (let* ?r . ?b)) ?e) FIXME "no message")

  ;; let* version 2
  ;; let* -> lets -> lambdas
  ;;
  ;;( (let* () . ?b)               (let () . ?b)                  )
  ;;( (let* ((?f ?e) . ?r) . ?b)   (let ((?f ?e)) (let* ?r . ?b)) )

  ; (letrec->define ((v1 e1) (v2 e2) ...) . b)
  ;   --> ((define v1 e1) (define v2 e2) . b)
  ;
  ( (letrec->define (?d) . ?b)      ((define . ?d) (let () . ?b))              FIXME "no message")
  ( (letrec->define (?d . ?r) . ?b) ((define . ?d) . (letrec->define ?r . ?b)) FIXME "no message")

  ; (letrec ((v e) ...) . b) 
  ;   --> (let () (define v e) ... (let () . b))
  ; 
  ( (letrec () . ?b) (let () . ?b)                       FIXME "no message")
  ( (letrec ?v . ?b) (let () . (letrec->define ?v . ?b)) FIXME "no message")
  
  ( (cons-stream ?a ?b)   (cons ?a (delay ?b))                              info "expanded")

  ( (zero? ("" zero? ?e)) 0 warn "argument evaluates to 0")
  ( (zero? ?e)            (eq? ?e 0)                                        info "simplified")
  ( (even? ?e)            (and (number? ?e) (eq? (remainder ?e 2) 0))       info "simplified")
  ( (odd?  ?e)            (and (number? ?e) (not (eq? (remainder ?e 2) 1))) info "simplified")
  ( (positive? ?e)        (and (number? ?e) (> ?e 0))                       info "expanded")
  ( (negative? ?e)        (and (number? ?e) (< ?e 0))                       info "expanded")
  ( (+ve? ?e)             (positive? ?e)                                    info "simplified")
  ( (-ve? ?e)             (negative? ?e)                                    info "simplified")
  ( (abs ?e)              (and (number? ?e) (if (>= ?e 0) ?e (- ?e)))       info "expanded")

  ( (+ ("req" number? ?a) ("req" number? ?b)) ("do" (+ ?a ?b)) 
      warn "evaluates to a number" )
   
  ; Works but loops forever
  ;    
  ( (cond . ?a) (kond . (cc* . ?a)) info "nothing to say" )    
  ( (cc* ?cc)      (cc . ?cc) info "still nothing to say" )
  ( (cc* ?cc . ?r) ((cc . ?cc) (cc* . ?r)) info "still nothing to say" )
  ( (cc ?c => . ?a) (?c . ?a)   warn "should you use =>?" )    
  ( (cc ?c . ?a)    (?c . ?a)   info "" )    
  ( (cc else . ?a)  (else . ?a) info "" )   
  
  ( (kond (else . ?a)) (progn . ?a) info "else clause now if alternative clause" )
  ( (kond (?c . ?a) . ?r) (if ?c (progn . ?a) (kond . ?r)) info "converted to 'if's")
  
   
))


; Group macros into sets to provide a constant time improvement
; worse case is no improvement, current case is about 30/55
;
; this reduced time from 3.4 to 2.2

(define transformers2 '(
  (define
    ( (define (?n . ?a) . ?b) (define ?n (lambda ?a . ?b)) info "expanded define to lambda form")
  ) 
  (delay
    ( (delay ("req" atom? ?a)) ?a         warn "can't delay a constant"      )
    ( (delay . ?e)       (lambda () . ?e) info "converted delay into lambda" )
  )
  (force
    ( (force ("req" atom? ?a)) ?a         warn "can't force a constant"      )
  )
  (begin
    ( (begin . ?b)       (progn . ?b)     warn "FIXME: make 'begin' normal"  ) 
  )
  (progn
    ( (progn ?e)         ?e               warn "simplified progn with single expression - is this correct?" )
  )
  (inc
    ( (inc ?a) (+ ?a 1) info "test" ) 
  )
  (dec
    ( (dec ?a) (1 ?a 1) info "test" ) 
  )
  
  (and
    ( (and)                   #t                      warn "has no arguments"           )  
    ( (and #f)                #f                      warn "argument evaluates false"   )  
    ( (and ("req" atom? ?x))  ?x                      warn "argument evaluates as true" )  
    ( (and ?e)                ?e                      info "has one argument"           ) 
    ( (and ?e1 . ?e2)         (if ?e1 (and . ?e2) #f) info "converted to 'if's"         ) 
  )
  
  (or
    ( (or)                   #f                      warn "has no argument"            )  
    ( (or #f)                #f                      warn "argument evaluates false"   )  
    ( (or ("req" atom? ?x))  ?x                      warn "argument evaluates as true" )  
    ( (or ?e)                ?e                      warn "has one argument"           ) 
    ( (or ?e1 . ?e2)         (if ?e1 ?e1 (or . ?e2)) info "converted to 'if's"         )
        ; r4rstest not (if ?e1 >#t< ...)
  )
  
  (not
    ( (not #f)               #t            warn "evaluates true"           )
    ( (not ("req" atom? ?a)) #f            warn "argument evaluates true" )
    ( (not ?e)               (if ?e #f #t) info "converted to 'if'"        )
  )
  
  (if
    ( (if #f ?c ?a)               ?a warn "consequent is unreachable"  )
    ( (if ("req" atom? ?x) ?c ?a) ?c warn "alternative is unreachable" )
    ( (if ?e #t #f)               ?e warn "not required"               )
  )
  
  ; (let->form ((v1 e1) (v2 e2) ...)) 
  ;   --> (v1 v2 ...)
  ;
  (let->form
    ( (let->form ()            ) ()                    info "no more let formals"      )
    ( (let->form ((?f ?e) . ?r)) (?f . (let->form ?r)) info "make list of let formals" )
  )
  
  ; (let->exps ((v1 e1) (v2 e2) ...)) 
  ;   --> (e1 e2 ...)
  ;
  (let->exps
    ( (let->exps ()            ) ()                    info "no more let expressions"      )
    ( (let->exps ((?f ?e) . ?r)) (?e . (let->exps ?r)) info "make list of let expressions" )
  )
  
  ; (let ((v1 e1) (v2 e2) ...) . ?b) 
  ;   --> ((lambda (v1 v2 ...) . ?b) e1 e2 ...)
  ;
  (let
    ( (let () . ?b) ((lambda () . ?b))                              
        info "convert let with no argument to lambda application" )
    ( (let ?a . ?b) ((lambda (let->form ?a) . ?b) . (let->exps ?a)) 
        info "convert let to lambda application"                  )
  )
  
  ; let* version 1
  ; let* -> lambdas - this should be faster
  (let*
    ( (let* () . ?b)             ((lambda () . ?b))                FIXME "no message")
    ( (let* ((?f ?e) . ?r) . ?b) ((lambda (?f) (let* ?r . ?b)) ?e) FIXME "no message")
  )
  
  ;; let* version 2
  ;; let* -> lets -> lambdas
  ;;
  ;;( (let* () . ?b)               (let () . ?b)                  )
  ;;( (let* ((?f ?e) . ?r) . ?b)   (let ((?f ?e)) (let* ?r . ?b)) )

  ; (letrec->define ((v1 e1) (v2 e2) ...) . b)
  ;   --> ((define v1 e1) (define v2 e2) . b)
  ;
  (letrec->define
    ( (letrec->define (?d) . ?b)      ((define . ?d) (let () . ?b))              FIXME "no message")
    ( (letrec->define (?d . ?r) . ?b) ((define . ?d) . (letrec->define ?r . ?b)) FIXME "no message")
  )
  
  ; (letrec ((v e) ...) . b) 
  ;   --> (let () (define v e) ... (let () . b))
  ; 
  (letrec
    ( (letrec () . ?b) (let () . ?b)                       FIXME "no message")
    ( (letrec ?v . ?b) (let () . (letrec->define ?v . ?b)) FIXME "no message")
  )
  
  (cons-stream
    ( (cons-stream ?a ?b)   (cons ?a (delay ?b))                              info "expanded")
  )
  
  (zero?
    ( (zero? ("" zero? ?e)) 0 warn "argument evaluates to 0")
    ( (zero? ?e)            (eq? ?e 0)                                        info "simplified")
  )
  (even?
    ( (even? ?e)            (and (number? ?e) (eq? (remainder ?e 2) 0))       info "simplified")
  )
  (odd?
    ( (odd?  ?e)            (and (number? ?e) (not (eq? (remainder ?e 2) 1))) info "simplified")
  )
  (positive?
    ( (positive? ?e)        (and (number? ?e) (> ?e 0))                       info "expanded")
  )
  (negative?
    ( (negative? ?e)        (and (number? ?e) (< ?e 0))                       info "expanded")
  )
  (+ve?
    ( (+ve? ?e)             (positive? ?e)                                    info "simplified")
  )
  (-ve?
    ( (-ve? ?e)             (negative? ?e)                                    info "simplified")
  )
  (abs
    ( (abs ?e)              (and (number? ?e) (if (>= ?e 0) ?e (- ?e)))       info "expanded")
  )
  
  (+
    ( (+ ("req" number? ?a) ("req" number? ?b)) ("do" (+ ?a ?b)) 
        warn "evaluates to a number" )
  )
  
  ; Works but loops forever if not kond
  ;
  (cond    
    ( (cond . ?a) (kond . (cc* . ?a)) info "nothing to say" )    
  )
  (cc*
    ( (cc* ?cc)      (cc . ?cc) info "still nothing to say" )
    ( (cc* ?cc . ?r) ((cc . ?cc) (cc* . ?r)) info "still nothing to say" )
  )
  (cc
    ( (cc ?c => . ?a) (?c . ?a)   warn "should you use =>?" )    
    ( (cc ?c . ?a)    (?c . ?a)   info "no cond clause change" )    
    ( (cc else . ?a)  (else . ?a) info "no else clause change" )   
  )
  (kond
    ( (kond (else . ?a)) (progn . ?a) info "else clause now if alternative clause" )
    ( (kond (?c . ?a) . ?r) (if ?c (progn . ?a) (kond . ?r)) info "converted to 'if's")
  )
   
))


