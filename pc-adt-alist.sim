"Loading a associative lists ADTs..."

(define pc-adt-alist.sim #t)

; associative list ((k . v) (k . v) ...)

(define make-alist (lambda (k v)
  (cond ((null? k) (if (null? v) '() (make-alist "Not enough keys for values" v)))
        ((atom? k) (list (make-kvp   k v)) )                ; key=(v v ...)
        ((null? v) (list (make-kvp   (car k) '())
                         (make-alist (cdr k) '())) )        ; missing values are ()
        (else      (list (make-kvp   (car k) (car v))
                         (make-alist (cdr k) (cdr v)))  )) 
))

(define extend-alist (lambda (kvp a) (cons kvp a)))

(define alist-assoc-gen (lambda (match? k a)
    ;(displayn "alist-assoc-gen  match?=[" match? "]  k=[" k "]  a=[" a "]")
  (cond ((null? a)                  #f)
        ((match? k (kvp-key (car a))) (car a))
        (else                       (alist-assoc-gen match? k (cdr a)))  )  ))

(define alist-assoc (lambda (k a) (alist-assoc-gen equal? k a)))
(define alist-assq  (lambda (k a) (alist-assoc-gen eq?    k a)))
(define alist-assv  (lambda (k a) (alist-assoc-gen eqv?   k a)))

(define alist-lookup (lambda (k a)
  ;(displayn "alist-lookup  k=[" k "]  a=[" a "]")
  (cond ((null? a)                    k)
        ((equal? k (kvp-key (car a))) (kvp-val (car a)))
        (else                         (alist-lookup k (cdr a)))  )))
  
(define assoc alist-assoc)
(define assq  alist-assq)
(define assv  alist-assv)

;. other versions

(define (assq x a)
  (cond ((null? a)        #f)
        ((eq? (caar a) x) (car a))
        (else             (assq x (cdr a)))))

(define (assv x a)
  (cond ((null? a)         #f)
        ((eqv? (caar a) x) (car a))
        (else              (assv x (cdr a)))))
    
(define (assoc x a)
  (cond ((null? a)           #f)
        ((equal? (caar a) x) (car a))
        (else                (assoc x (cdr a)))))
    
    
