
; some other stuff not used
;         
; a version of car, cdr and cons using lambda
;
;(define kar (lambda (z) (z (lambda (p q) p))))
;(define kdr (lambda (z) (z (lambda (p q) q))))
;(define kons (lambda (x y) (lambda (m) (m x y))))

; another version that is easier to understand but needs if
;
;(define kons2 (lambda (a b) (lambda (m) (if (eq? m 1) a b))))
;(define kar2 (lambda (x) (x 1)))
;(define kdr2 (lambda (x) (x 2)))


;; convert procedures into cps form
;(define (cps-prim f)
; (lambda args
;  (let ((r (reverse args)))
;   ;(print "r=")
;   ;(print r)
;   ((car r) (apply f
;             (reverse (cdr r))))))  )

;(define *& (cps-prim *))
;(define +& (cps-prim +))
;(+& 2 3 (lambda (x) (print x)))

; FIXME: no map-car

;(define (map f . a*)
;  (let
;    ((carof
;       (lambda (a)
;         (map-car car a)))
;     (cdrof
;       (lambda (a)
;         (map-car cdr a)))
;     (_map
;       (lambda (a* r)
;         (cond ((null? (car a*)) (reverse r))
;           (else (_map (cdrof a*)
;                 (cons (apply f (carof a*)) r)))))))
;    (cond ((null? a*)
;        (bottom '(too few arguments to map)))
;      (else (_map a* '())))))


