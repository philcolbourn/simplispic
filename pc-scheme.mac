"Loading a Toy Scheme Macros..."

(define pc-scheme.mac #t)

;(define warn (lambda (mess name atom) (cons mess (cons name atom)) ))
;
;can we keep record of defines so we know what file some function came from?
;maybe modify define to record filename in env
;
;(define requires (lambda (dep)
;  (if dep (displayn dep "loaded.") (load dep))))

;(requires "pc-adt-kv.sim")

; define or match a symbol
; FIXME:
(define match-or-define-variable (lambda (k v x e)
  (cond (k    (if (equal? (kvp-val k) x) e #f)
             ;(if (match? (kvp-val k) x e) e #f)     ; FIXME: match?
        )     
        (else (extend-alist (make-kvp v x) e))  )))

; Anything goes so long as it starts with ? and has something following
;
(define pat-var-has-prefix? (lambda (v) (eq? (symbol-ref v 0) #\?)))
(define pat-var-has-min-length? (lambda (v) (int> (symbol-length v) 1)))

; Return true if a pattern variable
; A variable is ?x where x is something
;
;(define pat-var? (lambda (v)
;  (if (symbol? v)
;      (if (eq? (symbol-ref v 0) #\?) 
;          (if (int> (symbol-length v) 1) #t #f) 
;          #f  )
;      #f  )  ))

(define pat-var? (lambda (v)
  (if (symbol? v)
  (if (pat-var-has-prefix? v) 
      (pat-var-has-min-length? v)
      #f  ) 
  #f  )  ))

(define tem-var? pat-var?)

;;;;;;;;;; Conditionl pattern variable ADT
;

; Return tag string of conditional variable
;
(define pat-cond-tag (lambda (c) (car c)))
      
; Return condition of a pattern conditional variable
;
(define pat-cond-pred (lambda (c) (cadr c)))

; Return conditional variable
;
(define pat-cond-var (lambda (c) (caddr c)))

; Rturn true if a pattern conditional
; eg. ("req" atom? ?a) means pattern expects an atom
;
(define pat-cond? (lambda (c)
  ;(displayn "pat-cond?  c=" c)
  (if (pair?    c                )
  (if (string?  (pat-cond-tag c) )
  (if (pair?    (cdr c)          )
  (if (symbol?  (pat-cond-pred c))
  (if (pair?    (cddr c)         )
      (pat-var? (pat-cond-var c) )  
      #f) #f) #f) #f) #f         )  ))


(define char->num '(
  (#\0 . 0)
  (#\1 . 1)
  (#\2 . 2)
  (#\3 . 3)
  (#\4 . 4)
  (#\5 . 5)
  (#\6 . 6)
  (#\7 . 7)
  (#\8 . 8)
  (#\9 . 9)
))

; hack to convert a pattern variable to a number
;
(define var->ref (lambda (v)
  (if (symbol? v                              )
  (if (pat-var-has-prefix? v                  )
      (alist-lookup (symbol-ref v 1) char->num)
      #f) #f                                  )  ))

; Apply a named predicte to a value
; Pedicate is a symbol. eg. 'atom? and value is used as a list
;
(define test-cond? (lambda (p? a)
  ;(displayn "test-cond?  p?=" p? "  a=" a)
  (apply (eval1 p?) (list a))  ))

; A template 'do' expression defines a procedure to execute to 
; transform a part of an expression.
; eg. ("do" (+ ?a ?b)) means to add ?a and ?b now and to put result into 
; resulting expression.
;
(define tem-do-tag (lambda (d) (car d)))
(define tem-do-exp (lambda (d) (cadr d)))
(define tem-do-exp? (lambda (d)
  (if (pair? d) (string? (tem-do-tag d)) #f)  ))
  

;(apply cons '("car" "cdr"))
;(define x 3)
;(apply cons '(x 12))
;(apply (eval1 'cons) '(x 12))
;(define exp 3)

;(test-cond? 'atom? exp)
;exp
;(exit 1)

; does template match expression given environment
;
(define match (lambda (p x e)
  ;(displayn "(match" p x e ")")
  (cond 
        ((eq? e #f)    e)
        ; SICP place
        ;((eq? p x)    e)  ; FIXME: eq or equal? does it matter?
        ((equal? p x)  e)
        ((pat-var? p)  (match-or-define-variable (alist-assoc p e) p x e))
        ((pat-cond? p) (if (test-cond? (pat-cond-pred p) x)  ; exp matches conditional
                           (match-or-define-variable (alist-assoc (pat-cond-var p) e) 
                                                     (pat-cond-var p) x e  )
                           #f  ))
        ((pair? p)     (if (pair? x) 
                           (match (cdr p) (cdr x) (match (car p) (car x) e))
                           #f  ))
        (else             ;(displayn "unknown list element") 
                          #f)  )  ))

; for a var, no need to perform macro expansion since we assume it is already
; done during read.
; but after a pair we should check
; macros in transformers should NOT go through macro expansion

(define pn (lambda (a) (displayn "-->" a) a))

(load "pc-macro-transformers.sim")

;(define make-exp-old (lambda (t e)
;  ;(displayn "(make-exp-old" t e ")")
;  ;(define pn I)
;  (define make (lambda (t)
;    (cond ((null? t)      t )
;          ((pat-var? t)   (alist-lookup t e) )
;          ((atom? t)      t  )
;          ((pair? t)      (eval-macro (pn (cons (make (car t)) 
;                                                (make (cdr t))  ))))
;          (else            (displayn "make-exp: unknown template element" t) #f)  )  ))
;  (make t)  ))

;(define x 1)
;(define y 2)
;(eval (+ 1 2) null-environment)
;(eval (+ x y) null-environment)
;(exit 1)

(define tem-make-exp (lambda (t e)
  ;(displayn "(tem-make-exp" t e ")")
  (cond 
        ((null? t)       t)
        ((pat-var? t)    (alist-lookup t e))
        ((tem-do-exp? t) (eval (tem-do-exp t) (cons e null-environment)))
        ((atom? t)       t)
        ((pair? t)       (eval-macro (cons (tem-make-exp (car t) e) 
                                           (tem-make-exp (cdr t) e)  )))
        (else            (displayn "tem-make-exp: unknown template element" t) #f)  )  ))

  
; make expression using positional values
; (add ?1 ?2) (3 4) -> (add 3 4)
;
; Use to trigger memory leak by internal define
;
(define make-expn (lambda (t . a)
  (define make (lambda (t)
    (cond ((null? t   )  t                         )
          ((pat-var? t)  (list-ref a (var->ref t)) )
          ((atom? t   )  t                         )
          ((pair? t   )  (cons (make (car t)) 
                               (make (cdr t))  )   )
          (else          (displayn "make-expn: unknown template element" t) #f)  )  ))
  (make t)  ))

(define make-expna (lambda (t a)
  (cond ((null? t   )  t                              )
        ((pat-var? t)  (list-ref a (var->ref t))      )
        ((atom? t   )  t                              )
        ((pair? t   )  (cons (make-expna (car t) a) 
                             (make-expna (cdr t) a)  ))
        (else          (displayn "make-expna: unknown template element" t) #f)  )  ))

(define make-expn-keep (lambda (t . a) (make-expna t a)))

(define set-tag    (lambda (s) (car s)))
(define set-macros (lambda (s) (cdr s))) 

; macro is (pattern template)
;
(define macro-pat          (lambda (m) (car m)   ))
(define macro-tem          (lambda (m) (cadr m)  ))
(define macro-message-type (lambda (m) (caddr m) ))
(define macro-message      (lambda (m) (cadddr m)))

; patern is (key . rest)
;
(define pat-key  (lambda (p) (car p)))
(define pat-rest (lambda (p) (cdr p)))

(define exp-tag  (lambda (x) (car x)))

; Notes: In transforming an expression to an equivalent expression,
; we know it has:
; 1) already matched a particular pattern,
; 2) has an environment of matched variables (could be empty), and
; 3) has a transform template.
;
; An expression will be run through zero or more transformations.
; A matched pattern will run through one or more transformations.
; After a transformation, new possible pattern matches may occur:
; 1) the new expression may match another pattern,
; 2) modified sub-expressions may now match a pattern, and/or
; 3) an enclosing super-expression may now be transformable.
;
; Only need to check exp, sub-exp and super-exp if a transform has 
; been applied and changed an expression.
; An identity transformation should not be considered a change (but it may not matter)



; Place macros into binary tree to provide (log N)/N improvement (best case)
; worse case is no improvement, current case is about (11+2)/(31+2)
; 11 comparisons in search and an average of 2 macros to select
;
; this reduced time from 2.2 to 0.9
; that includes bin-tree code and transformers -> transformers3 conversion!
; Overall reduction of (3.4-0.9)/3.4 = 2.5/3.4 = 74%

(define transformers3 '())

(for-each (lambda (t) 
                  (set! transformers3 
                        (bin-insert (pat-key (macro-pat t)) t transformers3)  )) 
          transformers  )

; Display a graph of binary tree
;
;(bin-display transformers3 '() "" "")

; An environment means we can apply this macro
; Else try next pattern
;
;(define eval-macro-transform (lambda (x trans e)
;  (cond (e    (displayn (macro-message-type (car trans)) ": " x 
;                        (macro-message (car trans))  )
;              (eval-macro (tem-make-exp (macro-tem (car trans)) e))  )
;        (else (eval-macro-match x (cdr trans)))  )  ))

;(define eval-macro-transform (lambda (x trans e)
;  (cond (e    (displayn (macro-message-type (car trans)) ": " x 
;                        (macro-message (car trans))  )
;              (tem-make-exp (macro-tem (car trans)) e)  )
;        (else (eval-macro-match x (cdr trans)))  )  ))

(define eval-macro-transform2 (lambda (x l e)
  (cond (e    (displayn (macro-message-type (car l)) ": " x 
                        (macro-message (car l))  )
              (tem-make-exp (macro-tem (car l)) e)  )
        (else (eval-macro-transform2 x (cdr l)))  )  ))  ; try others in set

; see if there are any macros that can be applied to expression
;
;(define eval-macro-match (lambda (x xforms)
;  (cond ((null? xforms)   x)                      ; no more translations
;        ((atom? x)        x)                      ; we don't translate atoms
;        ((eq? (pat-key (macro-pat (car xforms))) 
;              (exp-tag x)  )                         ; tag matches
;                          (eval-macro-transform x 
;                                            xforms 
;                                            (match (macro-pat (car xforms)) x '())  ))
;        (else             (eval-macro-match x (cdr xforms)))  )  ))  ; try next

(define eval-macro-match2 (lambda (x l)
      ;(displayn "(eval-macro-match2 " x "l)")
  (cond ((null? l) x)                      ; no more translation sets
        ((atom? x) x)                      ; we don't translate atoms
        ((eq? (set-tag (car l))            ; (car l) is first set
              (exp-tag x)  )                               ; tag matches
                   (eval-macro-set x (set-macros (car l)))  )  ; list of macros in set 
        (else      (eval-macro-match2 x (cdr l)))  )  ))   ; try next set

(define eval-macro-x3 (lambda (x l)
      ;(displayn "(eval-macro-x3 " x (if (null? l) "NIL" l) ")")
  (cond (l (eval-macro-set x (bin-val l)))  ; no more translation macros
        (else x))  ))  ; no macro found

(define eval-macro-match3 (lambda (x l)
      ;(displayn "(eval-macro-match3 " x "l)")
  (cond ((atom? x) x)                      ; we don't translate atoms
        (else (eval-macro-x3 x (bin-search (exp-tag x) transformers3)))  )  ))

(define eval-macro-apply (lambda (x l e)
  (cond (e    (displayn (macro-message-type (car l)) ": " x (macro-message (car l)))
              (tem-make-exp (macro-tem (car l)) e)  )
        (else (eval-macro-set x (cdr l)))  )  ))  ; try others in set

; Find first macro that matches and appl it
;
(define eval-macro-set (lambda (x l)
      ;(displayn "(eval-macro-set " x (if (null? l) "NIL" l) ")")
  (cond ((null? l) x)                                    ; no more translation macros
        (else      (eval-macro-apply 
                     x 
                     l                ; macros in set 
                     (match (macro-pat (car l)) x '())  )))  ))

; Return expresion is same as new else redo macro expansion
; similar to eval-if-different
;
;(define eval-macro-redo (lambda (x trans new)
;  (if (eq? new x) 
;      x 
;      (eval-macro-redoer new trans)  )  ))

;(define eval-macro-redo (lambda (x trans new)
;  (if (eq? new x) 
;      x 
;      (eval-macro-match new trans)  )  ))

; Redo macro expansion until no change
;
;(define eval-macro-redoer (lambda (x trans)
;  (eval-macro-redo x trans (eval-macro-match x trans))  ))

; try skipping redos here - seems to work
;
;(define eval-macro-redoer (lambda (x trans)
;  (eval-macro-match x trans)  ))

; Expand macros using transformers
;         
;(define eval-macro-exp (lambda (x)
;      (displayn "(eval-macro-exp" x ")")
;  (eval-macro-redoer x transformers)  ))

;(define eval-macro-exp (lambda (x)
;      (displayn "(eval-macro-exp" x ")")
;  (eval-macro-match2 x transformers2)  ))

(define eval-macro-exp (lambda (x)
      ;(displayn "(eval-macro-exp" x ")")
  (eval-macro-match3 x transformers3)  ))

; If car is a list, evaluate any macros
; Else evaluate macros in rest of list
;
;(define eval-macro-list (lambda (x)
;      (displayn "(eval-macro-list" x ")")
;  (cond ((atom? x)       x)
;        ((pair? (car x)) (eval-macro-exp (cons (eval-macro (car x)) 
;                                               (eval-macro-list (cdr x))  )))
;        (else            (eval-macro-exp (cons (car x)                  
;                                               (eval-macro-list (cdr x))  )))  )  ))


; equal? instead of eq? dropped time from 5.2 to 3.4 seconds
;
(define eval-if-different (lambda (f x n)
  (cond ((equal? x n) ;(displayn "no change") 
                      x  )
        (else         ;(displayn "CHANGED!") 
                      (f n)  ))  ))

(define eval-macro-list (lambda (x)
      ;(displayn "(eval-macro-list" x ")")
  (cond ((atom? x)       x)
        ((pair? (car x)) (eval-if-different eval-macro-exp 
                                            x
                                            (cons (eval-macro (car x)) 
                                                  (eval-macro-list (cdr x))  )))
        (else            (eval-if-different eval-macro-exp 
                                            x 
                                            (cons (car x)                  
                                                  (eval-macro-list (cdr x))  )))  )  ))
                                                  
; Transform an expression after processing sub-expressions
;
;(define eval-macro (lambda (x)
;      (displayn "(eval-macro" x ")")
;  (cond ((atom? x) x)
;        ;(else      (eval-macro-exp (cons (eval-macro (car x)) 
;        ;                                 (eval-macro (cdr x))  ))))  ))
;        (else      (eval-macro-exp (cons (eval-macro (car x)) 
;                                         (eval-macro-list (cdr x))  ))))  ))

(define eval-macro (lambda (x)
      ;(displayn "(eval-macro" x ")")
  (cond ((atom? x) x)
        (else      (eval-macro-exp (cons (eval-macro (car x)) 
                                         (eval-macro-list (cdr x))  ))))  ))

;; If car is a list, process it
;;
;(define do (lambda (e)
;  (cond ((atom? e) (print 'do) e)
;        ((pair? (car e))    (cons (xx (car e))  (do (cdr e))))
;        (else               (cons (car e)       (do (cdr e))))  )  ));
;
;; If tag matches, do macro and redo
;; Else process remaining list
;;
;(define xx (lambda (e)
;  (cond ;((atom? e) (print 'xx) (exit 1) e)
;        ((eq? (car e) 'aaa) (xx (cons 'AAA    (do (cdr e)))))
;        ((eq? (car e) 'bbb) (xx (cons 'aaa    (do (cdr e)))))
;        (else                   (cons (car e) (do (cdr e))))  )  ))   ; need redo here until no change



;(pc-test '(AAA)                       '(xx '(aaa))                       )
;(pc-test '(AAA aaa)                   '(xx '(aaa aaa))                   )
;(pc-test '(AAA aaa bbb aaa)           '(xx '(aaa aaa bbb aaa))           )
;(pc-test '(AAA aaa bbb (AAA))         '(xx '(aaa aaa bbb (aaa)))         )
;(pc-test '(AAA aaa bbb (AAA aaa))     '(xx '(aaa aaa bbb (aaa aaa)))     )
;(pc-test '(AAA aaa bbb (AAA aaa aaa)) '(xx '(aaa aaa bbb (aaa aaa aaa))) )
;(pc-test '(AAA aaa (AAA (AAA) (AAA) (AAA)) (AAA)) '(xx '(aaa aaa (bbb (aaa) (bbb) (aaa)) (aaa))) )

;(exit 1)

;(define  x-trans '(
;  ((aaa ?a) (zzz ?a))
;  ((bbb . ?a) (ccc . ?a))
;  ((ccc . ?a) (zzz . ?a))
;))

;(x '(aaa 2))
;(x '(aaa (aaa 2)))
;(x '(aaa (aaa (aaa 2))))
;(x '(aaa (aaa (aaa (aaa 2)))))
;(x '(aaa (bbb (aaa 2) (bbb (aaa 1) (bbb 2) 3))))

;(exit 1)

;;;;;;;;;; macro test area


; see if (delay <self evaluaing>) -> <self evaluating>
;
;(apply (eval1 'atom?) 12)

;(delay 3)
;(delay (car (cons "car" "cdr")))

; try out simplifications
;
;(not 2)
;(not #f)
;(if #f "error" "ok")
;(if 3 "ok" "error")
;(if (not #f) "ok" (if car "error" "oops"))
;(and 3)
;(and #f)
;(define x '(#f 3))
;(and (car x) #f)
;(and (car x) #t)

;(if (and (+ 1 2) (+ 3 4) #t (not #f)) "ok" "error")
;(delay (+ 1 2))
;(and not #f)

;(cond ((eq? 1 2) => (exit 1))
;      (else "ok")  )
      
; I think this is my benchmark for macros
;
(define q (lambda () (let ((x 3)) (+ x 3))  ))
q
(q)
(exit 1)

;;;;;;;;;; benchmarking
; see old file circa 6/2/2012 for some pairs benchmarking data
;;;;;;;;;;

;(? 1 1)
;(? + '+)
;(? 0 '(+) )
;(? 1 '(+ 1) )
;(? 3 '(+ 1 2) )
;(? 6 '(+ 1 2 3) )
;(? 10 '(+ 1 2 3 4) )
;(? 4 '(inc 3) )
;(? 5 '(begin 1 (inc 2) (+ 2 3)) )
;(? #t '(and) )
;(? 2 '(and 2) )
;(? #f '(and (= 1 2) (= 3 4) (= 5 6)) )
;(? #f '(or) )
;(? 2 '(or 2) )
;(? #f '(or (= 1 2) (= 3 4) (= 5 6)) )
;(? 6 '(let ((x 3)) (+ x 3)) )
;(? 6 '(let* ((x 3)) (+ x 3)) )
;(? 7 '(let* ((x 3) (y 4)) (+ x y)) )

;;;;;;;;;; keep last

;(display "Macros loaded.") (newline)
(display "Macros loaded.") (newline)

(cond ((eq? pc-test-count pc-test-stop) (displayn "Macro failed " pc-test-count "tests.") 
                                        (exit 1)  )
      (else '())  )

